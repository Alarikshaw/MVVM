{"version":3,"file":"vue.js","sources":["../../src/util/index.js","../../src/observer/array.js","../../src/observer/index.js","../../src/state.js","../../src/init.js","../../src/index.js"],"sourcesContent":["\r\n/**\r\n * 当前数据是不是对象\r\n * @param {*} data \r\n */\r\nexport function isObject (data) {\r\n    return typeof data === 'object' && data !== null\r\n}","// 重写数组的7个方法(此类方法会导致数组本身发生改变)\r\nlet oldArrayProtoMethods = Array.prototype;\r\nexport let arrayMethods = Object.create(oldArrayProtoMethods);\r\nlet methods = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'reverse',\r\n    'sort',\r\n    'splice'\r\n];\r\nmethods.forEach(method => {\r\n    arrayMethods[method] = function (...args) {\r\n        const result = oldArrayProtoMethods[method].apply(this, args);\r\n        const ob = this.__ob__;\r\n        let inserted;\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args;\r\n                break;\r\n            case 'splice':\r\n                inserted = args.slice(2)\r\n            default:\r\n                break;\r\n        }\r\n        if (inserted) ob.observeArray(inserted); // 对新增的每一项进行观测\r\n        return result\r\n    }\r\n})","import { isObject } from './../util/index';\r\nimport { arrayMethods } from './array.js';\r\n// 把data中的数据 都使用Object.defineProperty重新定义 es5\r\n// 特点 Object.defineProperty 不能兼容ie8及ie8以下 vue2 无法兼容ie8版本\r\n\r\nclass Observer {\r\n    constructor(value) {\r\n        // vue2如果数据层次过多，需要递归的去解析对象中的属性，依次增加set和get方法\r\n        // vue3 使用proxy 好处之一是不用递归，二是不用增加set和get方法\r\n\r\n        if (Array.isArray(value)) {\r\n            // 如果是数组的话并不会对索引进行观测，因为会导致性能问题\r\n            // 前端开发中很少 很少 去操作索引 push shift unshift\r\n            // 如果数组里放的是对象我再监控\r\n            value.__proto__ = arrayMethods; // 重写数组原型方法\r\n            this.observeArray(value);\r\n        } else {\r\n            // 对数组进行监控\r\n            this.walk(value)\r\n        }\r\n        \r\n    }\r\n    observerAray (value) {\r\n        for(let i = 0 ; i < value.length ;i ++){\r\n            observe(value[i]);\r\n        }\r\n    }\r\n    walk(data){ // 让对象上的所有属性依次进行观测\r\n        let keys = Object.keys(data);\r\n\r\n        keys.forEach(key => {\r\n            defineReactive(data,key,data[key]);\r\n        })\r\n    }\r\n}\r\nfunction defineReactive(data,key,value){\r\n    observe(value); // 递归实现深层检测\r\n    Object.defineProperty(data,key,{\r\n        get(){ // 获取值的时候做一些操作\r\n            return value\r\n        },\r\n        set(newValue){\r\n            if(newValue == value) return;\r\n            observe(newValue); // 继续劫持用户设置的值,因为有可能用户设置的值是一个对象\r\n            value = newValue\r\n        }\r\n    })\r\n}\r\nexport function observe (data){\r\n    \r\n    let isObj = isObject(data);\r\n    if (!isObj) {\r\n        return;\r\n    }\r\n    return new Observer(data); // 用来观测数据(劫持)\r\n}","import { observe } from './observer/index';\r\n\r\nexport function initState (vm) {\r\n    const opts = vm.$options;\r\n    // vue的数据来源 \r\n    // 先属性 再方法 数据 计算属性 watch\r\n    if (opts.props) { // 判断是否有数据传递\r\n        initProps(vm);\r\n    }\r\n    if (opts.methods) { // 判断是否有methods\r\n        initMethod(vm);\r\n    }\r\n    if (opts.data) { // 判断是否有data\r\n        initData(vm);\r\n    }\r\n    if (opts.computed) { // 判断是否有computed\r\n        initComputed(vm);\r\n    }\r\n    if (opts.watch) { // 判断是否有watch\r\n        initWatch(vm);\r\n    }\r\n}\r\n\r\nfunction initProps (vm) {}\r\nfunction initMethod (vm) {}\r\nfunction initData(vm){\r\n    let data = vm.$options.data;\r\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\r\n    \r\n    //  对象劫持 用户改变了数据，我希望可以得到通知 => 刷新页面\r\n    // MVVM 模式，数据变化可以驱动视图变化\r\n    // Object.defineProperty () 给属性增加get方法和set方法\r\n    observe(data); // 响应式原理\r\n\r\n}\r\nfunction initComputed (vm) {}\r\nfunction initWatch (vm) {}","import { initState } from './state'\r\n// 在原型上添加一个init方法\r\nexport function initMixin(Vue) {\r\n    // 初始化流程\r\n    Vue.prototype._init = function (options) {\r\n        \r\n\r\n        // 数据的劫持\r\n        // 拿到实例\r\n        const vm = this; // vue 中使用 this.$options 指代的就是用户传递的属性\r\n        vm.$options = options;\r\n\r\n\r\n        // 初始化状态\r\n        initState(vm); // 分割代码\r\n    }\r\n}","import { initMixin } from './init';\r\n// Vue的核心代码，只是vue的一个声明 (可扩展如render等，整合功能)\r\nfunction Vue(options) {\r\n    // 进行Vue的初始化操作\r\n\r\n    this._init(options)\r\n}\r\n// 通过引入文件的方式，给vue原型上添加方法\r\ninitMixin(Vue);\r\nexport default Vue"],"names":["isObject","data","oldArrayProtoMethods","Array","prototype","arrayMethods","Object","create","methods","forEach","method","args","result","apply","ob","__ob__","inserted","slice","observeArray","Observer","value","isArray","__proto__","walk","i","length","observe","keys","key","defineReactive","defineProperty","get","set","newValue","isObj","initState","vm","opts","$options","props","initData","computed","watch","_data","call","initMixin","Vue","_init","options"],"mappings":"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"}